#!/usr/bin/env python
import os
from optparse import OptionParser

## Global variables
flags = ""
outputFile = ""
directory = ""
compiler = ""
installPath = ""

def parseCommandline():
    global flags, outputFile, directory, compiler, installPath
    # Get commandline arguments
    parser = OptionParser(usage="Usage: pymake.py [-c Compiler -d Source Directory -f \"Flags\" -i Install Directory -o Output File]", version="PyMake Version 0.1.4")
    parser.add_option("-f", "--flags", dest="flags", help="Flags for the compiler. Typed within quotes. For example, \"-Wall\"", default="", metavar="Flags") 
    parser.add_option("-o", "--output", dest="outputFile", help="Output file name from compiler. Default is a.out", default="a.out", metavar="outputFile") 
    parser.add_option("-d", "--directory", dest="directory", help="Directory for pymake to create Makefile for. Default is ./", default="./", metavar="directory") 
    parser.add_option("-c", "--compiler", dest="compiler", help="Set compiler to use. If not set, pymake will look at your files and guess", default="", metavar="compiler") 
    parser.add_option("-i", "--install-dir", dest="installPath", help="Directory for 'make install'. Default is /usr/local/bin", default="/usr/local/bin", metavar="installPath") 
    (options, args) = parser.parse_args()
    outputFile = options.outputFile
    flags = options.flags
    directory = options.directory
    compiler = options.compiler
    installPath = options.installPath

def files():
    allFiles = [f for f in os.listdir('.') if os.path.isfile(f)]
    sourceFiles = []
    for f in allFiles:
        if "." in f and f.startswith('.') is False:
            sourceFiles.append(f)
    return sourceFiles

def typeOfFile(fileName):
    return fileName[(fileName.index('.'))+1:]

def baseFileName(fileName):
    return fileName[:(fileName.index('.'))]

def compilerName(fileType):
    if fileType == "c":
        return "gcc"
    elif fileType == "cpp":
        return "g++"
    else:
        print("File type '" + fileType + "' not supported yet. Defaulting to gcc.")
        return "gcc"

def generateFileContents(fileNames, compilerName):
    global flags, outputFile, installPath ## From commandline
    fileContents = "# Generated by pymake version 0.1.4.  \n# PyMake was written by Stephen Melinyshyn | github.com/Melinysh/PyMake\n\n"
    
    ## Use PYMAKE_COMPILER_FLAGS and PYMAKE_COMPILER to keep it track of compiler and flags for either C or C++.
    if compilerName == "gcc":
        fileContents += "CC := " + compilerName + "\n"
        fileContents += "CFLAGS := " + flags + "\n"
        fileContents += "PYMAKE_COMPILER := $(CC)\n"
        fileContents += "PYMAKE_COMPILER_FLAGS := $(CFLAGS)\n"
    else:
        fileContents += "CXX := " + compilerName + "\n"
        fileContents += "CXXFLAGS := " + flags + "\n"
        fileContents += "PYMAKE_COMPILER := $(CXX)\n"
        fileContents += "PYMAKE_COMPILER_FLAGS := $(CXXFLAGS)\n"
    fileContents += "INSTALL_PATH := " + installPath + "\n"
    fileContents += "TARGET := " + outputFile + "\n"
    fileContents += "OBJECTS := " + fileNames + "\n\n"

    fileContents += "all: $(TARGET)\n\n"
    fileContents += "$(TARGET): $(OBJECTS)\n"
    fileContents += "\t$(PYMAKE_COMPILER) $(PYMAKE_COMPILER_FLAGS) -o $(TARGET) $(OBJECTS)\n"
    
    ## Install
    fileContents += "\n"
    fileContents += "install: $(TARGET)\n"
    fileContents += "\tinstall $(TARGET) $(INSTALL_PATH)\n"

    ## Uninstall
    fileContents += "\n"
    fileContents += "uninstall:\n"
    fileContents += "\t-rm $(INSTALL_PATH)/$(TARGET)\n"

    ## Clean
    fileContents += "\n"
    fileContents += "clean:" + "\n"
    fileContents += "\t" + "-rm $(TARGET)\n"

    return fileContents 

def writeToMakefile(fileContents):
    makefile = open("Makefile", 'w')
    makefile.write(fileContents)
    makefile.close()


def start():
    global compiler
    parseCommandline()
    os.chdir(directory)
    fileList = files()
    fileContents = ""
    fileNames = ""
    for f in fileList:
        fileNames += f + " "
    if compiler is "":
        fileContents = generateFileContents(fileNames, compilerName(typeOfFile(fileList[0]))) # Take the file type of the first file
    else:
        fileContents = generateFileContents(fileNames, compiler) # Use the user specified compiler
    writeToMakefile(fileContents)
    print("Makefile created.")
    exit(0)

start()
